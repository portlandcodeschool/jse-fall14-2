{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red52\green110\blue183;\red38\green38\blue38;
\red254\green253\blue213;\red245\green245\blue245;\red36\green43\blue51;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww20380\viewh12540\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs32 \cf0 \
\pard\pardeftab720\sl760\sa320

\b \cf2 Homework #2\cf0 \
\pard\pardeftab720\sl500\sa320

\b0 \cf2 Due Mon, 9/15\cf0 \
\pard\pardeftab720\sl260
\cf0 \
\pard\pardeftab720\sa120
\cf0 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 0)
\b0  Create a free {\field{\*\fldinst{HYPERLINK "https://github.com/portlandcodeschool/jse-fall14-2/blob/master/www.getharvest.com"}}{\fldrslt \cf3 Harvest}} account and track your class-related hours this week. If you don't remember to start the timer when you begin working, try to estimate and log your time retroactively. Be descriptive about which activity you're working on (e.g. in class, office hours, doing homework, reading, etc). On next Monday, generate an invoice for the week and turn it in with your homework.\cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Remember that you should expect to spend 20 hours per week outside of class. As a general guideline, at least half of that should be spent directly on the homework problems, and another quarter should be background reading and studying.\cf0 \
\cf2 Each problem below lists, along with its projected difficulty level, an approximate time budget. The total time estimate for this homework is around 10 hours.\cf0 \
\pard\pardeftab720\sl260
\cf0 \
\pard\pardeftab720\sa120
\cf0 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 1)
\b0  
\i (Easy, 1/2 hr)
\i0 \cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Revisit your solution to homework #1, problem 4, which expresses an improper fraction as a proper one, and turn your solution into a function.\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 a)
\b0  Write a function printFraction(n,d) which takes 2 parameters (n,d) and returns a string. For example, printFraction(7,4) should return "1 3/4". Assume that 
\i n
\i0  and 
\i d
\i0  are both positive integers.\
Original Solution:\
\pard\pardeftab720
\cf0 var n = 7;\
var d = 4;\
var wholeNumber = 0;\
var properNumerator = n%d;\
var numeratorCounter = n;\
while (numeratorCounter>d) \{\
  numeratorCounter = numeratorCounter-d\
  ++wholeNumber\
\}\
var mixedFraction = wholeNumber + " " + properNumerator + "/" + d;\cf4 \
\pard\pardeftab720\sl500\sa320
\cf0 \
\pard\pardeftab720

\b \cf0 \cb5 Rewritten as a function:\
function printFraction(n,d) \{\
\pard\pardeftab720
\cf0   var n;\
  var d;\
  var wholeNumber = 0;\
  var properNumerator = n%d;\
  var numeratorCounter = n;\
  while (numeratorCounter>d) \{\
    numeratorCounter = numeratorCounter-d\
    ++wholeNumber\
   \}\
var mixedFraction = wholeNumber + " " + properNumerator + "/" + d;\
return mixedFraction;\
\pard\pardeftab720
\cf0 \}
\b0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 \cb1 b)
\b0  Write a second version of your function which improves the output in two special cases:\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\sa320
\ls1\ilvl0\cf2 {\listtext	\'95	}A output string like "0 1/2" should be simplified to just "1/2";\
{\listtext	\'95	}A output string like "1 0/3" should be simplified to just "1".\
\pard\pardeftab720

\b \cf0 \cb5 function printFraction(n,d) \{\
  var n;\
  var d;\
  var wholeNumber = 0;\
  var properNumerator = n%d;\
  var numeratorCounter = n;\
  while (numeratorCounter>d-1) \{\
    numeratorCounter = numeratorCounter-d\
    ++wholeNumber\
   \}\
if ((wholeNumber == 0)&&(properNumerator !== 0))\
  var mixedFraction = properNumerator + "/" + d;\
else\
   if ((wholeNumber == 0) && (properNumerator == 0))\
   var mixedFraction = 0;\
   else\
   if ((wholeNumber !== 0) && (properNumerator ==0))\
     var mixedFraction = wholeNumber;\
     else\
     var mixedFraction = wholeNumber + " " + properNumerator + "/" + d;\
return mixedFraction;\
\}
\b0 \cb1 \
\pard\pardeftab720\sl260
\cf0 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 2)
\b0  
\i (Easyish, 2 hrs)
\i0 \cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Rewrite each block below as the simplest equivalent you can discover. Your equivalent should produce the same final conditions as the original code given the same initial conditions.\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 a)
\b0 \cf0 \
\pard\pardeftab720\sl420\sa320
\cf2 \cb6 var i;\uc0\u8232 if ((n - Math.floor(n)) >= .5) \{\u8232  \'a0\'a0i = Math.ceil(n);\u8232 \} else \{\u8232  \'a0i = Math.floor(n);\u8232 \}\
\pard\pardeftab720

\b \cf4 \cb5 My Answer:\
\pard\pardeftab720
\cf2 Math.round(i);\cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 \cb1 b)
\b0 \cf0 \
\pard\pardeftab720\sl420\sa320
\cf2 \cb6 var y, xIsFalse = (x? false : true);\uc0\u8232 if (xIsFalse)\u8232  \'a0\'a0y = false;\u8232 else\u8232  \'a0\'a0y = x;\
\pard\pardeftab720

\b \cf4 \cb5 My Answer:\
\pard\pardeftab720
\cf2 var y, x;\
y=x;\cb1 \
\pard\pardeftab720\sl500\sa320
\cf2 c)
\b0 \cf0 \
\pard\pardeftab720\sl420\sa320
\cf2 \cb6 for (var count = 15 - i ; count < 15 ; count=count+1) \{\uc0\u8232  \'a0\'a0\'a0i = i-1;\u8232  \'a0\'a0\'a0console.log(i+1)\u8232 \}\cf0 \cb1 \
\pard\pardeftab720

\b \cf2 \cb5 My Answer:\
for(var i=10; i>=0;--i)\{\
console.log(i);\
\}\cb1 \
\pard\pardeftab720\sl500\sa320
\cf2 d)
\b0 \cf0 \
\pard\pardeftab720\sl420\sa320
\cf2 \cb6 var x;\uc0\u8232 if (a) \{\u8232  \'a0\'a0if (b) \{\u8232  \'a0\'a0\'a0\'a0x = 0;\u8232  \'a0\'a0\} else \{\u8232  \'a0\'a0\'a0\'a0x = 1;\u8232  \'a0\'a0\}\u8232 \} else \{\u8232  \'a0if (b) \{\u8232  \'a0\'a0\'a0x = 1;\u8232  \'a0\} else \{\u8232  \'a0\'a0\'a0x = 2;\u8232  \'a0\}\u8232 \}\cf0 \cb1 \
\pard\pardeftab720\sl260
\cf0 \
\pard\pardeftab720

\b \cf4 \cb5 My Answer:\
var a, b, x;\
if (a&&b) \{\
   x=0;\
   \} else \{\
     if (!a&&!b)\{\
     x=2;\
     \} else \{\
        x=1;\
        \}\
\}\
Alternative that\'92s easiest to read:\
var a, b, x;\
if (a&&b) x=0;\
if (!a&&!b) x = 2;\
if (!a&&b)||(a&&!b) x = 1;\
\pard\pardeftab720\sa120

\b0 \cf0 \cb1 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 3)
\b0  
\i (Moderate, 2 hrs)
\i0 \cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Write a program which generates a string containing the entire lyrics for the song "The Twelve Days of Christmas". Make sure that your result is grammatically and typographically correct (include line breaks, commas, etc. where needed), but keep redundancy within your program to a minimum. You may want to use functions, loops, and/or arrays to store repeated elements. (Tip: within any string, '\\n' creates a line break.)\cf0 \
\cf2 If you prefer a non-Christmas option, you may choose a different song with similarly repeating structure, such as "There was an Old Woman Who Swallowed a Fly".\cf0 \
\pard\pardeftab720

\b \cf0 \cb5 My answer:\
\pard\pardeftab720

\b0 \cf0 \cb1 \
\pard\pardeftab720
\cf0 \cb5 var versePartOne = "";\
var versePartTwo = "";\
\
var cardinalNumbers = ["second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth"];\
\
var gifts = ["Two Turtle Doves,\\nAnd a Partridge in a Pear Tree.", "Three French Hens,", "Four Calling Birds,", "Five Golden Rings,", "Six Geese a Laying,", "Seven Swans a Swimming,", "Eight Maids a Milking,", "Nine Ladies Dancing,", "Ten Lords a Leaping,", "Eleven Pipers Piping,", "Twelve Drummers Drumming,"];\
\
\
function writeLyrics()\{\
\
	console.log("On the first day of Christmas\\nMy true love sent to me:\\nA partridge in a Pear Tree.\\n");\
	for(i=0; i<11; i++)\{\
	\
		\
		versePartOne = "On the " + cardinalNumbers[i] + " day of Christmas\\nMy true love sent to me:\\n";\
		versePartTwo = gifts[i] + "\\n" + versePartTwo;\
		\
		console.log(versePartOne + versePartTwo + "\\n");\
		\}\
\
\}\
\pard\pardeftab720\sl260
\cf0 \cb1 \
\pard\pardeftab720\sa120
\cf0 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 4)
\b0  
\i (Difficult, 2.5 hrs)
\i0 \cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Suppose the '&' key on your keyboard is missing, and you want to be able to continue programming without it.\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 a)
\b0  Write a function and2(a,b) which tries to simulate the && operator: it should always return the same result as (a && b) for any values of 
\i a
\i0  and 
\i b
\i0 . (For example, and2((0>1),true) should return 
\i false
\i0 .) But you can't use && itself within your function!\
\pard\pardeftab720

\b \cf2 \cb5 My Answer:\
\pard\pardeftab720

\b0 \cf2 function and2(a,b)\{\
    if (a == false)\
        return false;\
        else if (b == false)\
            return false;\
            else return true;\
\}\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 \cb1 b)
\b0  Write another function and3(a,b,c) which tries to simulate a double-&& operator: it should always return the same result as (a && b && c) for any values of a,b,c. (For example, and3((1>0),(0>1),true) should return 
\i false
\i0 .) As before, you're not allowed to use && itself.\

\b \cb5 My Answer:\
\pard\pardeftab720

\b0 \cf2 function and3(a,b,c)\{\
    if (a == false)\
        return false;\
        else if (b == false)\
            return false;\
                else if (c == false)\
                    return false;\
            else return true;\
\}\cf0 \cb1 \
\pard\pardeftab720\sl500\sa320

\b \cf2 c)
\b0  Now generalize your function to handle any number of values. You will learn better ways eventually, but for now use an array to store all the values. Your new function andN(n,values) should accept two parameters: n is the length of the array values. Assume the array holds at least n values. If your array argument holds values [a,b,c...z], as in andN(26,[a,b,c...z]), the function should return the same result as (a && b && c && ... z). Make sure to handle two special cases: length 0 (then return 
\i true
\i0 ) and length 1 (then return that single value). Again, don't use &&.\

\b \cb5 My Answer:\
\pard\pardeftab720

\b0 \cf2 function andN(myCount,inputValues)\{\
    if (myCount == 0) return true;\
    if (myCount == 1) return myCount;\
    for (i=0; i<myCount-1; i++)\{\
    if (inputValues[i] == false)\
        return false;\
    \}\
    return true;\
\}\cb1 \
\pard\pardeftab720\sl500\sa320

\b \cf2 d)
\b0  You've just realized that your effort was doomed: neither of your functions can replace the && operator in certain circumstances. Explain why, and find an example which demonstrates failure.\cf0 \
\pard\pardeftab720\sl260

\b \cf0 \cb5 I think the answer has something to do with the fact that when evaluating a \'93real\'94 AND operator will just quit evaluating anything else if it comes across any false value? Although I think my proposed replacements will do the same thing..so I\'92m unsure.\
\pard\pardeftab720\sa120

\b0 \cf0 \cb1 \
\pard\pardeftab720\sa240
\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 5)
\b0  
\i (Moderate, 3 hrs)
\i0 \cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Imagine that a deck of playing cards is sorted by rank and suit: first all the Aces, then the Twos, etc, with the Kings last. Within each rank, the suits are in the order Hearts, Diamonds, Spades, Clubs. Number each card in order from 0 to 51 (i.e. 0=Ace of Hearts; 51=King of Clubs), and let that ID number represent the corresponding card. Use that encoding scheme for each part below.\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 a)
\b0  Write five related functions to compute different aspects of a card:\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa640
\ls2\ilvl0\cf2 {\listtext	\'95	}rank(id) returns 1-13, representing the card's rank (for an 
\i id
\i0  between 0-51).\
\pard\tx720\pardeftab720

\b \cf2 \cb5 function rank(id) \{\
id = Math.ceil((id+1)/4);\
return id;\
\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa640
\ls3\ilvl0
\b0 \cf2 \cb1 {\listtext	\'95	}suit(id) returns 1-4, representing the card's suit (1 is Hearts, 4 is Clubs).\
\pard\pardeftab720

\b \cf7 \cb5 function suit(id) \{\
id = (id%4)+1;\
return id;\
\}\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa640
\ls4\ilvl0
\b0 \cf2 {\listtext	\'95	}color(id) returns "red" or "black".\
\pard\tx720\pardeftab720

\b \cf2 \cb5 function color(id)\{\
    var mySuit = suit(id);\
    if ((mySuit === 1) || (mySuit ===2))\
    return "red";\
    else \
	return "black";\
\}\
\pard\tx720\pardeftab720

\b0 \cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa640
\ls5\ilvl0\cf2 {\listtext	\'95	}name(id) returns the full name of the card (e.g. "Four of Diamonds")\
\pard\tx720\pardeftab720

\b \cf2 \cb5 function name(id)\{\
    var suitName = ["Hearts", "Diamonds", "Spades", "Clubs"];\
    var rankName = ["Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"]\
    \
    var fullName = rankName[rank(id)-1] + " of " + suitName[suit(id)-1];\
    return fullName;\
\}
\b0 \cb1 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa640
\ls6\ilvl0\cf2 {\listtext	\'95	}cardID(rank,suit) returns 0-51, identifying the card id of a given rank and suit.\
\pard\tx720\pardeftab720

\b \cf2 \cb5 function cardID(rank, suit)\{\
        var cardID = (rank-1)*4 + suit-1;\
        return cardID;\
\}\
\cb1 \
\pard\tx720\pardeftab720

\b0 \cf2 Assume each function is given valid arguments (i.e. the args are integers in the appropriate range). Your functions may call each other-- for example: 
\i color
\i0  could be derived from 
\i suit
\i0 . Try to reuse functions to avoid duplicating code.\cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 Hint #1: Notice the patterns as the card id ranges from 0 to 51:\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\sa320
\ls7\ilvl0\cf2 {\listtext	\'95	}rank(id) increases slowly, like a quotient;\
{\listtext	\'95	}suit(id) cycles quickly through 1-4, (almost) like a remainder;\
{\listtext	\'95	}color(id) alternates R,B,R,B...\
\pard\pardeftab720\sl500\sa320
\cf2 Hint #2: Generate your card names by combining a rank word from one array and suit word from another.\cf0 \
\cf2 Write your code into the {\field{\*\fldinst{HYPERLINK "https://github.com/portlandcodeschool/jse-fall14-2/blob/master/cards-template1a.js"}}{\fldrslt \cf3 template file}}. The template also includes a suite of assertions for testing your code. When you evaluate the entire template file, the assertions at the end will write messages to the console if your functions fail any test. Make sure you pass all the tests!\cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 b)
\b0  Now abandon the assumption of valid arguments and program defensively! Rewrite your five functions so that each returns the correct answer when all arguments are valid, but returns NaN if any argument is not an integer in the appropriate range.\cf0 \
\pard\pardeftab720\sl500\sa320
\cf2 You may use the provided {\field{\*\fldinst{HYPERLINK "https://github.com/portlandcodeschool/jse-fall14-2/blob/master/cards-template1b.js"}}{\fldrslt \cf3 template file}}, which has extra tests checking the results of invalid arguments.\cf0 \
\cf2 Hint #3: you can test whether an number 
\i n
\i0  is an integer with (n%1 === 0).\
\pard\pardeftab720

\b \cf2 \cb5 function rank(id) \{\
    if ((id%1===0) && (id>-1) && (id<52) && typeof id == "number")\{\
    id = Math.ceil((id+1)/4);\
    return id;\
    \}\
    else return NaN;\
\}\
\
function suit(id) \{\
    if ((id%1===0) && (id>-1) && (id<52) && typeof id == "number")\{\
    id = (id%4)+1;\
    return id;\
    \}\
    else return NaN;\
\}\
\
function color(id)\{\
    var mySuit = suit(id);\
    if ((id%1===0) && (id>-1) && (id<52) && typeof id == "number")\{\
        if ((mySuit === 1) || (mySuit ===2))\
        return "red";\
        else \
            return "black";\
            \}\
            else return NaN;\
\}\
\
function name(id)\{\
    var suitName = ["Hearts", "Diamonds", "Spades", "Clubs"];\
    var rankName = ["Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"]\
    if ((id%1===0) && (id>-1) && (id<52) && typeof id == "number")\{\
    var fullName = rankName[rank(id)-1] + " of " + suitName[suit(id)-1];\
    return fullName;\
    \}\
    else return NaN;\
\}\
\
function cardID(rank, suit)\{\
    if ((rank%1===0) && (rank>0) && (rank<14) && typeof rank == "number" &&\
    (suit%1===0) && (suit>0) && (suit<5) && typeof suit == "number")\{\
        \
        var cardID = (rank-1)*4 + suit-1;\
        return cardID;\
        \}\
        else return NaN;\
        \
\}
\b0 \cf0 \
\pard\pardeftab720\sl500\sa320

\b \cf2 \cb1 c)
\b0  In the file with your solution to part 
\b b
\b0 , extend the existing test suite: write 3 new assertions to test success cases and 3 more assertions to test failure cases.\
\pard\pardeftab720

\b \cf2 \cb5 //Tristan's additional testing\
//Success Testing:\
assert(rank(1)===1,  "Test 47 failed");\
assert(cardID(11,1)===40,    "Test 48 failed");\
assert(name(10)==='Three of Spades', "Test 49 failed");\
//Failure Testing:\
assert(isNaN(cardID("blue","shoe")),"Test 50 failed");\
assert(isNaN(suit(false)), "Test 51 failed");\
assert(isNaN(name(400,000)),"Test 52 failed");
\b0 \cf0 \cb1 \
\pard\pardeftab720\sl500

\i \cf2 (Please note: Problem 5 is the most important one in this homework, because variations of it will recur in several later homeworks. The cleaner your code is now, the easier it will be to modify later.)}